<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/12/19
 * Time: 16:32
 */

namespace app\common\model;


use think\Db;
use think\Loader;
use think\Model;
use think\Session;
use app\common\controller\Core;

class Base extends Model
{
    /**
     * @var 当前页码
     */
    public $index_curr;
    /**
     * @var 每页的数量
     */
    public $index_size;
    /**
     * @var 总数
     */
    public $index_count;

    /**
     * @var array where条件
     */
    public $index_where = [];

    /**
     * @var 搜索的URL参数
     */
    public $search_url;

    /**
     * @var 测试query语句
     */
    public $model_query;
    /**
     * @var string 默认模板名称
     */
    public $tpl = '';
    //
    public $alias_name = 'tab';

    public function __get($name)
    {
        if (in_array($name,['search_field','search_time'])){
            return null;
        }
        return parent::__get($name); // TODO: Change the autogenerated stub
    }

    public function __call($method, $args)
    {
        if (in_array($method,['fromTypeSelectValues'])){
            return [];
        }
        return parent::__call($method, $args); // TODO: Change the autogenerated stub
    }

    /**
     * 生成where条件 加别名
     * @param string $fle
     * @param array $val
     * @return array|mixed
     */
    public function tabWhere($fle = '',$val = [])
    {
        if (empty($fle) || empty($val)){
            $where = [
                $this->alias_name.'.id'=>['NEQ',0]
            ];
        }else{
            $where = getWhere($fle,$val,$this->alias_name.'.');
        }
        return $where;
    }

    /**
     * 生成field方法第一个参数 加别名
     * @param string $ids
     * @return array|mixed
     */
    public function tabField($ids='*')
    {
        if (is_string($ids) && !empty($ids) && strpos($ids,'*') === false){
            $ids = explode(',',$ids);
        }else{
            $field = str_replace('*',$this->alias_name.'.*',$ids);
        }
        if (is_array($ids)){
            foreach ($ids as $va){
                //匹配是不是额外加的字段
                if (preg_match('/^[a-z]+\\s?[a-z]+$/',$va) || strpos($va,'.') === false) {
                    //判断属性是否存在
                    if (property_exists($this, 'deleteTime')) {
                        if ($va != $this->deleteTime) {
                            //拼接字段
                            $va = $this->alias_name . '.' . $va;
                        }
                    } else {
                        $va = $this->alias_name . '.' . $va;
                    }
                }
                $field[] = $va;
            }
        }
        return $field;
    }

    /**
     * 生成order条件 加别名
     * @param string $str
     * @return array|mixed|string
     */
    public function tabOrder($str = 'id')
    {
        if (empty($str)){
            $str = 'id';
        }
        if (is_string($str)){
            if (strpos($str,',')){
                $order = str_replace(',',','.$this->alias_name.'.',$this->alias_name.'.'.$str);
            }else{
                $order = $this->alias_name.'.'.$str;
            }
        }
        if (is_array($str) && !empty($str)){
            foreach ($str as $k=>$value){
                if (is_numeric($k)){
                    $order[] = $this->alias_name.'.'.$value;
                }else{
                    $order[$this->alias_name.'.'.$k] = $value;
                }
            }
        }
        return $order;
    }

    /**
     * 生成group条件 可以是数组
     * @param string $str
     * @return mixed|string
     */
    public function tabGroup($str='id',$true = false)
    {
        if ($true) {
            if (is_string($str) && !empty($str)) {
                $str = $this->alias_name . '.' . $str;
                if (strpos($str, ',')) {
                    $group = str_replace(',', ',' . $this->alias_name . '.', $str);
                } else {
                    $group = $str;
                }
            } elseif (is_array($str)) {
                $str = implode(',', $str);
                $group = $this->tabGroup($str);
            } else {
                $group = $this->tabGroup();
            }
        }else{
            $group = $str;
        }
        return $group;
    }

    /**
     * 返回上月和本月的where条件
     * @param $field 字段
     * @param $type 类型id
     * @param $id 会员id
     * @param string $op 类型条件连接符
     * @return mixed
     */
    public function lasTimeWheres($field,$type,$id,$op = 'eq')
    {
        $timeOuts = geTimeOuts();
        $type_id = [$op,$type];
        $user_id = ['eq',$id];
        $where['last'] = getWhere($field,[$timeOuts['last_where'],$type_id,$user_id]);
        $where['this'] = getWhere($field,[$timeOuts['this_where'],$type_id,$user_id]);
        return $where;
    }

    /**
     * @param string $field  条件字段  也可以直接传条件 array
     * @param array $value   条件表达式
     * @param string $order  排序
     * @param string $ids    field()的第一个参数 字段
     * @param bool $true     field()的第二个参数
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function selectAllTree($field='',$value = [],$order = 'id',$ids = '*',$true = false)
    {
        if (empty($value) && !empty($field)){
            $where = [
                'id'=>['NEQ',0]
            ];
        }else {
            $where = getWhere($field, $value);
        }
        $tree = $this->field($ids,$true)->where($where)->order($order)->select();
        return $tree;
    }

    /**
     * @param string $field   条件字段
     * @param array $value    条件表达式
     * @param array $page     分页
     * @param string $order   排序
     * @param string $ids     field()的第一个参数 字段
     * @param bool $true      field()的第二个参数
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function selectList($field = '',$value = [],$page = [1,10],$order = 'id desc',$ids = '',$true = false)
    {
        $where = $this->tabWhere($field,$value);
        $page = $page?:[1,10];
        $order = $this->tabOrder($order);
        $fie = $this->tabField($ids);
        $tree = $this->alias($this->alias_name)->field($fie,$true)
            ->where($where)->page($page['0'],$page['1'])->order($order)->select();
        return $tree;
    }

    /**
     * 子查询查询 查询多条
     * @param $sql SQL语句 或者完整表名
     * @param string $fld where条件字段
     * @param array $val  where条件value
     * @param string $fie field字段
     * @param bool $true  field是否排除
     * @param $join       join条件
     * @param string $or  order条件
     * @param int $start  limit起始位置
     * @param int $row    limit条件
     * @return array|false|\PDOStatement|string|Model
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function tabSonSelList($sql, $fld = '', $val = [], $fie = '', $true = false, $join, $or = '')
    {
        $this->alias_name = 'ta';
        $field = $this->tabField($fie);
        $where = $this->tabWhere($fld,$val);
        $order = $this->tabOrder($or);
        $list = Db::table($sql . ' '.$this->alias_name)->field($field,$true)
            ->where($where)->join($join)->order($order)->select();
        return $list;
    }

    /**
     * 生成子查询SQL语句
     * @param $name
     * @param string $fle
     * @param array $val
     * @param string $ids
     * @param bool $true
     * @param string $grp
     * @return string
     * @throws \think\exception\DbException
     */
    public function tabSonSqlSet($name,$fle = '',$val = [],$ids = '*',$grp = 'id',$true = false)
    {
        $where = $this->tabWhere($fle,$val);
        $field = $this->tabField($ids);
        $grp = $this->tabGroup($grp);
        $sql = Db::name($name.' '.$this->alias_name)->field($field,$true)->where($where)
            ->group($grp)->buildSql();
        return $sql;
    }

    /**
     * @param $field   条件字段
     * @param $value   条件表达式
     * @param string $ids   field()的第一个参数 字段
     * @param bool $true    field()的第二个参数
     * @return array|false|\PDOStatement|string|Model
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function tabFind($field = '', $value = [], $ids = '', $true = false)
    {
        $where = getWhere($field,$value,$this->alias_name.'.');
        $fie = $this->tabField($ids);
        $list = $this->alias($this->alias_name)->field($fie,$true)
            ->where($where)->find();
        return $list;
    }

    /**
     * 返回 表id
     * @param $data 数据
     * @param $true 条件id
     * @param string $file 上传文件的字段名
     * @return mixed
     */
    public function tabAdd($data, $true, $file = '')
    {
        if ($_FILES) {
            if (is_string($file) && $file != '') {
                $file_list =Loader::controller('common/Upload')->upload($file);
                $data[$file] = $file_list[0];
            }
            if (is_array($file)) {
                // todo 数组处理上传图片 自定义
                halt($file);
//                return 'is array';
            }
        }
        $this->allowField(true)->save($data,$true);
        return $this->id;
    }

    /**
     * 分页 搜索 参数组装
     * @param $data
     * @return $this
     */
    public function laypageWhere($data)
    {
        //页码
        $this->index_curr = $data->get('curr')?:1;
        //每页数量
        $this->index_size = $data->get('limit')?:10;
        //where条件的field字段
        $this->index_where['field'] = 'id';
        //where条件的表达式
        $this->index_where['value'] = [['NEQ',0]];
        //搜索起始时间
        $this->search_start_time = $data->get('start_time')?:'';
        //搜索结束时间
        $this->search_end_time = $data->get('end_time')?:'';
        //搜索内容
        $this->search_name = $data->get('search_name')?:'';
        //省
        //市
        //区
        //下拉菜单参数
        $list = $data->get();
        unset($list['curr']);
        unset($list['limit']);
        unset($list['start_time']);
        unset($list['end_time']);
        unset($list['search_name']);
        $select_field_list = $list;

        //判断搜索是否存在
        if (!empty($this->search_name)){
            $this->index_where['field'] .= ','.$this->search_field;
            $this->index_where['value'] =
                array_merge($this->index_where['value'],
                    [['like', '%'.$this->search_name.'%']]);
        }
        //生成时间段条件
        if (!empty($this->search_start_time) && !empty($this->search_end_time)){
            $this->index_where['field'] .= ','.$this->search_time;
            $this->index_where['value'] =
                array_merge($this->index_where['value'],
                    [['between', [strtotime($this->search_start_time),strtotime($this->search_end_time)]]]);
        }
        //生成下拉菜单查询条件
        if (!empty($select_field_list)){
            foreach ($select_field_list as $key=>$value){
                if ($value !== "") {
                    $this->index_where['field'] .= ',' . $key;
                    $this->index_where['value'] =
                        array_merge($this->index_where['value'],
                            [['eq', $value]]);
                }
            }
        }
        //生成where条件
        $where = getWhere($this->index_where['field'],$this->index_where['value']);
        //总数
        $this->index_count = $this->where($where)->count();
        //搜索参数的组装
        $this->search_url = http_build_query($data->get());
        return $this;
    }

    public function _from_data($data)
    {
        $list = [];
        if (is_object($data)) {
            foreach ($data as $val) {
                $list[] = $val->toArray();
            }
        }elseif (is_array($data)){
            return $list = $data;
        }else{
            // todo
        }
        return $list;
    }


    /**
     * 额外的where条件
     * @param $field 'field1,field2'
     * @param $value [['op','condition']]
     * @return $this
     */
    public function whereCopy($field = '',$value = [])
    {
        if (!empty($field) && !empty($value)) {
            $where = getWhere($field, $value);
            $this->where($where);
        }
        return $this;
    }

    /**
     * 权限查看
     * @param $field
     * @param $op
     * @return $this
     */
    public function authUser($field = 'id',$op = 'eq')
    {
        if (Session::get('auth_type_id') != 1){
            $this->where($field,$op,Session::get('id'));
        }
        return $this;
    }

}