<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/6/15
 * Time: 14:51
 */

namespace app\userapi\controller;


use think\Config;
use think\Controller;
use think\Loader;
use think\Session;
use think\Request;
use think\Db;

class Api extends Controller
{
    public $model = null;
    public $user_img = '';

    public function _initialize()
    {
        // todo
        $this->user_img = Config::get('system.site_url').Config::get('system.user_img');
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 验证码 获取
     * @return int|mixed
     * @throws \think\Exception
     */
    public function setCode($id = '', $true= true)
    {
        Session::init([
            'expire'         => 300,
            'prefix'         => 'userapi',
            'type'           => '',
            'auto_start'     => true,
            'httponly'       => true,
            'secure'         => false,
        ]);
        if (Session::has('code','userapi') && $id != ''){
            return Session::get('code','userapi');
        }else{
            $rand = rand(100000,999999);
            Session::set('code',$rand,'userapi');
            if ($true){
                return message($rand,'获取成功',2);
            }else{
                return $rand;
            }
        }
    }

    /**
     * @param Request $request 资源
     * @param string $model    模型名
     * @param bool $script     参数
     * @param string $value    参数
     * @return mixed
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     */
    public function setStatus(Request $request, $model = '', $script = false, $value='')
    {
        if (empty($model)){
            $model = $request->controller();
        }
        $id = $request->post('id/a');
        $status = $request->post('status','');
        $field = $request->post('field','status');
        switch ($status){
            case 'del':
                $info = Db::name($model)->delete($id);
                if (empty($info)){
                    return message('','删除失败',3);
                }else{
                    return message('','成功删除'.$info.'条记录',2);
                }
                break;
            case config('status.open'):
                $info = Db::name($model)->whereIn('id',$id)->setField($field,config('status.close'));
                if (empty($info)){
                    return message('','操作失败',3);
                }else{
                    return message('','操作成功'.$info.'条记录',2);
                }
                break;
            case config('status.close'):
                $info = Db::name($model)->whereIn('id',$id)->setField($field,config('status.open'));
                if (empty($info)){
                    return message('','操作失败',3);
                }else{
                    return message('','操作成功'.$info.'条记录',2);
                }
                break;
            case 'all-purpose':
                $info = Db::name($model)->whereIn('id',$id)->setField($field,$value);
                if (empty($info)){
                    return message('','操作失败',3);
                }else{
                    return message('','操作成功'.$info.'条记录',2);
                }
                break;
            default:
                return message('','操作失败',3);
                break;
        }
    }

    /**
     * 不规则多边形：奇内偶外
     * @param $lon 经度 string
     * @param $lat  维度 string
     * @param $coords  不规则多边形的点 json字符串
     */
    public function isPointInPolygon( $lon, $lat, $coords ){
        $wn = 0;
        $shift = false;
        if( $coords[0]['lat'] > $lat ) {
            $shift = true;
        }

        for( $i = 1; $i<count( $coords ); $i++ ){
            $shiftp = $shift;
            $shift = $coords[$i]['lat'] > $lat;

            if( $shiftp != $shift ) {
                $n = ( $shiftp ? 1 : 0 ) - ( $shift ? 1 : 0 );
                if( $n * (
                    ( $coords[$i-1]['lng'] - $lon ) * ( $coords[$i]['lat'] - $lat ) -
                    ( $coords[$i-1]['lat'] - $lat ) * ( $coords[$i]['lng'] - $lon )
                    )
                    > 0
                ) {
                    $wn += $n;
                }
            }
        }
        echo $wn;
    }

    /**
     * 电子围栏：根据经纬度判断一点是否在不规则多边形区域内
     */
    public function ltwlnum()
    {
        $coords='[{lng:116.398718, lat:39.921917}, {lng:116.394334, lat:39.911735}, {lng:116.564202, lat:39.757502}, {lng:116.603296, lat:39.959553}, {lng:116.419415, lat:39.915055}, {lng:116.415319, lat:39.921585}, {lng:116.407126, lat:39.923245}, {lng:116.37218, lat:39.948934},{lng:116.398718, lat:39.921917}]';
        $coords = str_replace("l", "\"l", str_replace("g", "g\"", str_replace("t", "t\"", $coords)));
        $coords = json_decode( $coords, true );
        //里边
        $lon = 116.434164;
        $lat = 39.509622;

        return $this->isPointInPolygon($lon, $lat, $coords);
    }


}